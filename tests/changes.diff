diff --git a/tests/TODO b/tests/TODO
index 4f66fa8..30ef027 100644
--- a/tests/TODO
+++ b/tests/TODO
@@ -1,10 +1,6 @@
 This file lists tests that need to be implemented or expanded. See ticket #3121
 for changes related to things listed here.
 
-Tests to add:
--------------
-	* add tests for dojo.place()
-
 Tests to improve:
 -----------------
 	* NodeList isn't testing several of its public methods (place, orphan, adopt, etc.)
diff --git a/tests/_base/declare.js b/tests/_base/declare.js
index 011776f..140f7b3 100644
--- a/tests/_base/declare.js
+++ b/tests/_base/declare.js
@@ -475,18 +475,65 @@ define([
 			var C = dojo.declare(null, {
 				bar: "thonk"
 			});
+
+			// Both 'mixins' and 'props' parameters are provided
 			var D1 = A.createSubclass([B, C], {
 				constructor: function(){
 					this.foo = "blah";
 				}
 			});
+
+			// Only 'mixins' parameters is provided
 			var D2 = A.createSubclass([B, C]);
+
+			// The 'props' parameter is provided as first instead of second parameter
+			var D3 = A.createSubclass({
+			   constructor: function(){
+				this.foo = "blah";
+				}
+			});
+
+			// No arguments at all provided
+			var D4 = A.createSubclass();
+
+			// Single Mixin
+			var D5 = A.createSubclass(C);
+
 			var d1 = new D1();
 			var d2 = new D2();
+			var d3 = new D3();
+			var d4 = new D4();
+			var d5 = new D5();
 			t.is("blah", d1.foo);
 			t.is("thonk", d2.foo);
 			t.is("thonk", d1.bar);
 			t.is("thonk", d2.bar);
+			t.is("blah", d3.foo);
+			t.is("thonk", d4.foo);
+			t.is("thonk", d5.bar);
+		},
+
+		function safeMixin(t){
+			var fooCalled;
+			var subFooCalled;
+			var C = declare(null, {
+				foo: function(){
+					fooCalled = true;
+				}
+			});
+			var c = new C();
+			// make sure we can mixin foo
+			declare.safeMixin(c, {
+				foo: function(){
+					subFooCalled = true;
+					this.inherited(arguments);
+				}
+			});
+			// make sure this doesn't throw an error
+			declare.safeMixin(c);
+			c.foo();
+			t.t(fooCalled);
+			t.t(subFooCalled);
 		}
 
 		// FIXME: there are still some permutations to test like:
diff --git a/tests/_base/fx.html b/tests/_base/fx.html
index 50fb40f..0f07e12 100644
--- a/tests/_base/fx.html
+++ b/tests/_base/fx.html
@@ -54,6 +54,19 @@
 						}
 					},
 					{
+						name: "destroy",
+						timeout: timeout,
+						runTest: function(){
+							var anim = baseFx.fadeOut({ node: 'foo', duration: duration });
+							var stopCalled = false;
+							aspect.after(anim, "stop", function () {
+								stopCalled = true;
+							});
+							anim.destroy();
+							doh.t(stopCalled);
+						}
+					},
+					{
 						name: "animateColor",
 						timeout: timeout,
 						runTest: function(){
diff --git a/tests/_base/html.html b/tests/_base/html.html
index 02ce9ad..d774bc3 100644
--- a/tests/_base/html.html
+++ b/tests/_base/html.html
@@ -43,7 +43,7 @@
 
 				doh.register("t",
 					[
-						"doh.is(null, dojo.byId('nonExistantId'));",
+						"doh.is(null, dojo.byId('nonExistentId'));",
 						"doh.is(null, dojo.byId(null));",
 						"doh.is(null, dojo.byId(''));",
 						"doh.is(undefined, dojo.byId(undefined));",
@@ -665,6 +665,19 @@
 							dojo.destroy(p);
 							doh.t(true, "no exception thrown");
 						}
+/*
+						// Make sure empty() doesn't disconnect grandchildren from children.
+						// Uncomment when http://bugs.dojotoolkit.org/ticket/16957 is fixed.
+						function emptyGrandchildren(){
+							var parent = dojo.byId("emptyParent"),
+								child = dojo.byId("emptyChild");
+
+							dojo.empty("emptyParent");
+
+							doh.f(!!parent.firstChild, "parent's children removed");
+							doh.t(!!child.firstChild, "child's children remain");
+						}
+*/
 					]
 				);
 
@@ -915,6 +928,13 @@
 			><param name="background" value="transparent"
 		/></object>
 
+		<!-- Test that empty doesn't disconnect grandchildren from children -->
+		<div id="emptyParent">
+			<div id="emptyChild">
+				<div id="emptyGrandchild">hello world</div>
+			</div>
+		</div>
+
 		<!-- IFRAME element to test destroy -->
 		<iframe id="iframeToDestroy" src="about:blank"
 			><span></span
diff --git a/tests/_base/i18nExhaustive.js b/tests/_base/i18nExhaustive.js
index 227d7c5..2119eae 100644
--- a/tests/_base/i18nExhaustive.js
+++ b/tests/_base/i18nExhaustive.js
@@ -4,6 +4,9 @@ define([
 	"require"
 ], function(dojo, doh, require){
 	var testParams = [
+		"sync,,src,./dojo,src,./i18n-test,legacy",
+		"sync,,src,./dojo,legacy-built,./built-i18n-test/152-build,legacy",
+		"sync,,src,./dojo,legacy-built-layer,./built-i18n-test/152-build-with-layers-and-preloads,legacy",
 		"sync,,src,./dojo,src,./i18n-test,amd",
 		"sync,,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -16,6 +19,10 @@ define([
 		"sync,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"sync,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+				
+		"sync,ab,src,./dojo,src,./i18n-test,legacy",
+		"sync,ab,src,./dojo,legacy-built,./built-i18n-test/152-build,legacy",
+		"sync,ab,src,./dojo,legacy-built-layer,./built-i18n-test/152-build-with-layers-and-preloads,legacy",
 		"sync,ab,src,./dojo,src,./i18n-test,amd",
 		"sync,ab,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,ab,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -28,6 +35,10 @@ define([
 		"sync,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"sync,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+		
+		"sync,ab-cd,src,./dojo,src,./i18n-test,legacy",
+		"sync,ab-cd,src,./dojo,legacy-built,./built-i18n-test/152-build,legacy",
+		"sync,ab-cd,src,./dojo,legacy-built-layer,./built-i18n-test/152-build-with-layers-and-preloads,legacy",
 		"sync,ab-cd,src,./dojo,src,./i18n-test,amd",
 		"sync,ab-cd,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,ab-cd,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -40,6 +51,10 @@ define([
 		"sync,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"sync,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+
+		"sync,ab-cd-ef,src,./dojo,src,./i18n-test,legacy",
+		"sync,ab-cd-ef,src,./dojo,legacy-built,./built-i18n-test/152-build,legacy",
+		"sync,ab-cd-ef,src,./dojo,legacy-built-layer,./built-i18n-test/152-build-with-layers-and-preloads,legacy",
 		"sync,ab-cd-ef,src,./dojo,src,./i18n-test,amd",
 		"sync,ab-cd-ef,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"sync,ab-cd-ef,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -64,6 +79,7 @@ define([
 		"async,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"async,,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+		
 		"async,ab,src,./dojo,src,./i18n-test,amd",
 		"async,ab,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,ab,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -76,6 +92,7 @@ define([
 		"async,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"async,ab,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+
 		"async,ab-cd,src,./dojo,src,./i18n-test,amd",
 		"async,ab-cd,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,ab-cd,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
@@ -88,6 +105,7 @@ define([
 		"async,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
 		"async,ab-cd,cdn,http://192.168.1.114/dev/dtk/built-i18n-test/cdn/dojo,built,./built-i18n-test/built-with-layers-and-preloads/i18nTest,amd",
+		
 		"async,ab-cd-ef,src,./dojo,src,./i18n-test,amd",
 		"async,ab-cd-ef,src,./dojo,built,./built-i18n-test/built/i18nTest,amd",
 		"async,ab-cd-ef,src,./dojo,built,./built-i18n-test/built-with-layers/i18nTest,amd",
diff --git a/tests/_base/lang.js b/tests/_base/lang.js
index fcec650..2f47fc1 100644
--- a/tests/_base/lang.js
+++ b/tests/_base/lang.js
@@ -1,6 +1,62 @@
-define(["doh/main", "dojo/_base/array", "dojo/_base/lang"], function(doh, array, lang){
+define(["doh/main", "dojo/_base/array", "dojo/_base/lang", "dojo/_base/kernel"
+], function(doh, array, lang, kernel){
 
   doh.register("tests._base.lang", [
+		function exists(t){
+			var test = {
+				foo : 0
+			};
+			t.assertTrue(lang.exists("foo", test), 'lang.exists("foo", test)');
+			t.assertFalse(lang.exists("foo.bar", test), 'lang.exists("foo.bar", test)');
+
+			// global tests
+			t.assertFalse(lang.exists("_existsTest"), 'lang.exists("_existsTest") #1');
+			kernel.global._existsTest = false;
+			t.assertTrue(lang.exists("_existsTest"), 'lang.exists("_existsTest") #2');
+			t.assertFalse(lang.exists("_existsTest.bar"), 'lang.exists("_existsTest.bar")');
+
+			// scopeMap tests
+			t.assertTrue(lang.exists("dojo.dijit"), 'lang.exists("dojo.dijit")');
+			t.assertFalse(lang.exists("dojo.foo"), 'lang.exists("dojo.foo")');
+		},
+
+		function getObject(t){
+			var test = {
+				foo : {}
+			};
+			t.assertEqual(test.foo, lang.getObject("foo", false, test), 'lang.getObject("foo", false, test)');
+			t.assertEqual("undefined", typeof lang.getObject("foo.bar", false, test), // don't create
+				'typeof lang.getObject("foo.bar", false, test)');
+			t.assertEqual({}, lang.getObject("foo.bar", true, test),  // do create
+				'lang.getObject("foo.bar", true, test)');
+			test.foo.bar.baz = "test";
+			t.assertEqual(test.foo.bar, lang.getObject("foo.bar", false, test),
+				'lang.getObject("foo.bar", false, test)');
+
+			// global tests
+			t.assertEqual("undefined", typeof lang.getObject("_getObjectTest.bar", false),	// don't create
+				'typeof lang.getObject("_getObjectTest.bar", false)');
+			kernel.global._getObjectTest = {};
+			t.assertEqual(kernel.global._getObjectTest, lang.getObject("_getObjectTest", false), // don't create
+				'lang.getObject("_getObjectTest", false)');
+			t.assertEqual({}, lang.getObject("_getObjectTest.bar", true), 'lang.getObject("_getObjectTest.bar", true)'); // do create
+
+			// strangely, parser does this
+			t.assertEqual("undefined", typeof lang.getObject("./TestWidget"), 'typeof lang.getObject("./TestWidget")');
+
+			// empty path should return the same object
+			t.assertEqual(test, lang.getObject("", false, test));
+			t.assertEqual(kernel.global, lang.getObject(""));
+		},
+
+		function setObject(t){
+			var test = {
+				foo : 0
+			};
+			t.assertTrue(lang.setObject("foo", {bar : "test"}, test));
+			t.assertEqual({bar : "test"}, lang.getObject("foo", false, test));
+		},
+
 		function mixin(t){
 			t.assertEqual("object", typeof lang.mixin());
 			t.assertEqual("object", typeof lang.mixin(undefined));
@@ -55,6 +111,19 @@ define(["doh/main", "dojo/_base/array", "dojo/_base/lang"], function(doh, array,
 			t.assertTrue(lang.isArray([]));
 			t.assertTrue(lang.isArray(new Array()));
 			t.assertFalse(lang.isArray({}));
+			t.assertFalse(lang.isArray(''));
+			t.assertFalse(lang.isArray(0));
+			t.assertFalse(lang.isArray(NaN));
+			t.assertFalse(lang.isArray(null));
+			t.assertFalse(lang.isArray(undefined));
+			if(typeof window != "undefined"){
+				t.assertFalse(lang.isArray(window));
+			}
+			t.assertFalse(lang.isArray(Function));
+
+			function Tricky() {}
+			Tricky.prototype = [];
+			t.assertFalse(lang.isArray(new Tricky));
 		},
 
 		function isArrayLike(t){
@@ -62,6 +131,20 @@ define(["doh/main", "dojo/_base/array", "dojo/_base/lang"], function(doh, array,
 			t.assertTrue(lang.isArrayLike(new Array()));
 			t.assertFalse(lang.isArrayLike({}));
 			t.assertTrue(lang.isArrayLike(arguments));
+			t.assertFalse(lang.isArrayLike(""));
+			t.assertFalse(lang.isArrayLike(false));
+			t.assertFalse(lang.isArrayLike(NaN));
+			t.assertFalse(lang.isArrayLike(undefined));
+			t.assertFalse(lang.isArrayLike(null));
+			if(typeof window != "undefined"){
+				t.assertTrue(lang.isArrayLike(window));
+			}
+			t.assertFalse(lang.isArrayLike(Function));
+
+			t.assertTrue(lang.isArrayLike({0: 1, 1: 2, length: 2}));
+			function Tricky() {}
+			Tricky.prototype = [];
+			t.assertTrue(lang.isArrayLike(new Tricky));
 		},
 
 		function isString(t){
diff --git a/tests/_base/loader/coolio/test.html b/tests/_base/loader/coolio/test.html
index 25dfd54..a5dd482 100644
--- a/tests/_base/loader/coolio/test.html
+++ b/tests/_base/loader/coolio/test.html
@@ -29,7 +29,7 @@
 		and dijit (or any other module trees) on the page while developing--no build require. Notice the console
 		when you load this example: multiple instance, but it's the slowest of the bunch.</p>
 		<p>Generally, this mode is not useful under normal circumstances. However, it is a good test of the cross-domain
-		loader in the presense of relocated module trees.</p>
+		loader in the presence of relocated module trees.</p>
 
 		<h3><a href="coolio-dev-legacy-async-with-packageMap.html">Developing a component with
 				the legacy API, loaded asynchronously</a></h3>
diff --git a/tests/_base/loader/hostenv_webworkers.js b/tests/_base/loader/hostenv_webworkers.js
new file mode 100644
index 0000000..104f2cc
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers.js
@@ -0,0 +1,325 @@
+define([
+	"doh/main",
+	"dojo/has",
+	"dojo/sniff"
+], function(doh, has, sniff){
+	// summary:
+	//		Test the loading of Dojo in the WebWorker environment.
+
+	has.add("webworkers", (typeof Worker === 'function'));
+	if(has("webworkers")){
+		// Tests will still pass when workers not available but warning issued.
+
+		var fixtures = {
+			deferred: function(){
+				this.deferred = new doh.Deferred();
+			}
+		};
+
+		var tearDowns = {
+			killWorker: function(){
+				var self = this;
+				this.deferred.then(function(){
+					self.worker.terminate();
+				});
+
+			},
+			killBlobWorker: function(){
+				var self = this;
+				this.deferred.then(function(){
+					if(has("blobs") && has("convertObjectUrl")){
+						self.worker.terminate();
+						window.URL.revokeObjectURL(self.workerBlobURL);
+					}
+				});
+
+			}
+		};
+
+		function reflectConsole(message){
+			if(message.data.consoleType in console){
+				if(has("opera") && opera.postError){
+					opera.postError(message.data.consoleType.toUpperCase() + ": Platform does not support Blobs");
+				}else{
+					console[message.data.consoleType](message.data.value);
+				}
+			}else{
+				if(has("opera") && opera.postError){
+					opera.postError("ERROR: Could not reflect console message type: " + message.data.consoleType);
+				}else{
+					console.error("Could not reflect console message type: " + message.data.consoleType);
+				}
+			}
+		}
+
+		doh.register("tests._base.hostenv_webworkers", [{
+			name: "Loading Dojo core inside worker",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test whether dojo can be loaded in the worker
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker1.js");
+
+				this.worker.addEventListener("message", function (message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "console"){
+							reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}, {
+			name: "Load a dojo script via require",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test whether require works in the worker.
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker2.js");
+
+				this.worker.addEventListener("message", function (message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "console"){
+						reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}, {
+			name: "Load a dojo script via require in async mode",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test whether require works in the worker when in async mode.
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker3.js");
+
+				this.worker.addEventListener("message", function(message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "console"){
+						reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}, {
+			name: "Load a dojo script via require in a subworker",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test whether Dojo will load in a subworker.
+				// description:
+				// 		This is more complex as two workers are created. The first acts as a
+				// 		middleman between this function and the subworker.  Some browsers do not
+				// 		support subworkers at writing (eg. Chrome - see:
+				// 		https://code.google.com/p/chromium/issues/detail?id=31666 for current status).
+				// 		Test issues a warning if subworks not available but passes the test.
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker4.js");
+
+				this.worker.addEventListener("message", function(message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "console"){
+						reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}, {
+			name: "Test for loading in a blob worker",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killBlobWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test for loading dojo and using require in a blob worker
+				has.add("blobs", (typeof Blob === 'function'));
+				has.add("convertObjectUrl", function(){
+					var URL = window.URL || window.webkitURL;
+					if(URL !== undefined){
+						return (typeof URL.createObjectURL === 'function');
+					}
+
+					return false;
+				});
+
+				if(has("blobs") && has("convertObjectUrl")){
+					function getBaseAbsoluteUrl(){
+						// summary:
+						// 		Blobs need absolute urls to be used within them as relative is relative
+						//		to blob://<object>.
+						// TODO:
+						//		Is there a better way of calculating the absolute url base path?
+
+						var baseUrl = require.rawConfig.baseUrl.split("/");
+						var absoluteUrl = location.pathname.split("/");
+						absoluteUrl.pop();
+						absoluteUrl.pop();
+						baseUrl.pop();
+
+						return location.protocol + "//" + location.host + absoluteUrl.join("/") + "/" + baseUrl.join("/") + "/";
+					}
+
+					var workerBlob = new Blob([
+						'var dojoConfig = {' +
+							'"baseUrl":"' + getBaseAbsoluteUrl() + '",' +
+							'"packages":[{"name":"dojo", "location":"dojo"}]' +
+						'};' +
+
+						'importScripts(' +
+							'dojoConfig.baseUrl+"dojo/dojo.js",' +
+							'dojoConfig.baseUrl+"dojo/tests/_base/loader/hostenv_webworkers/console.js"' +
+						');' +
+
+						'try{' +
+							'require(["dojo/tests/_base/loader/hostenv_webworkers/strings"], function(strings){' +
+								'this.postMessage({type:"testResult", "test":"require is working", "value":true});' +
+							'});' +
+						'}catch(e){' +
+							'this.postMessage({' +
+								'type:"testResult", "test":"require is working", "value":false' +
+						'});' +
+					'}'], {type: "text/javascript"});
+
+					var self = this;
+					var URL = window.URL || window.webkitURL;
+					self.workerBlobURL = URL.createObjectURL(workerBlob);
+
+					try{
+						this.worker = new Worker(self.workerBlobURL);
+						this.worker.addEventListener("message", function(message){
+							if(message.data.type === "testResult"){
+								if(message.data.value){
+									self.deferred.resolve();
+								}else{
+									self.deferred.reject();
+								}
+							}else if(message.data.type === "console"){
+								reflectConsole(message);
+							}
+						}, false);
+					}catch(e){
+						if(e.message.toLowerCase() === "securityerror"){
+							// IE does not support Webworkers from Blobs at present
+
+							console.warn("Blob workers are not supported");
+							self.deferred.resolve();
+						}else{
+							throw e;
+						}
+					}
+
+					return this.deferred;
+				}else{
+					if(window.opera){
+						opera.postError("WARN: Platform does not support Blobs");
+					}else{
+						console.log("Platform does not support Blobs");
+					}
+				}
+			}
+		}, {
+			name: "Test making a XHR request inside a worker using dojo/request",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+					//		Test using dojo/request in a worker
+				// description:
+				//		This is a more advanced test to ensure Dojo's implementation of
+				//		XHR works in the webworker.  It is also a general test of loading
+				//		components via require and then using them.
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker5.js?v=4");
+
+				this.worker.addEventListener("message", function(message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "console"){
+						reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}, {
+			name: "Test using dojo/on in a worker",
+			setUp: fixtures.deferred,
+			tearDown: tearDowns.killWorker,
+			timeout: 5000,
+			runTest: function(){
+				// summary:
+				//		Test using dojo/on in a worker.
+				// description:
+				//		Another advanced test to see if dojo/on works in workers where there is no DOM.
+				//		Test waits for the worker to request a message and then send one. Worker uses
+				//		dojo/on to listen for messages on the worker global.  It responds with a
+				//		pass for the test if it receives it correctly.
+
+				var self = this;
+				this.worker = new Worker("../../dojo/tests/_base/loader/hostenv_webworkers/worker6.js");
+
+				this.worker.addEventListener("message", function (message){
+					if(message.data.type === "testResult"){
+						if(message.data.value){
+							self.deferred.resolve();
+						}else{
+							self.deferred.reject();
+						}
+					}else if(message.data.type === "requestMessage"){
+						self.worker.postMessage({type: "gotMessage"})
+					}else if(message.data.type === "console"){
+						reflectConsole(message);
+					}
+				}, false);
+
+				return this.deferred;
+			}
+		}]);
+	}else{
+		console.warno("Platform does not support webworkers")
+	}
+});
diff --git a/tests/_base/loader/hostenv_webworkers/console.js b/tests/_base/loader/hostenv_webworkers/console.js
new file mode 100644
index 0000000..9103208
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/console.js
@@ -0,0 +1,30 @@
+// summary:
+//		Console polyfill for webworkers.
+// description:
+//		Webworkers do not have access to the console as of writing (except in Chrome).  This polyfills
+//		the console by passing messages back to the browser window for it to reflect to the console.
+//		This should make debugging of test failure a bit easier.
+
+if(!self.console){
+	console = {
+		_sendMessage: function(type, message){
+			self.postMessage({
+				type: "console",
+				consoleType: type,
+				value: message
+			});
+		},
+		log: function(message){
+			console._sendMessage("log", message);
+		},
+		error: function(message){
+			console._sendMessage("error", message);
+		},
+		warn: function(message){
+			console._sendMessage("warn", message);
+		},
+		info: function(message){
+			console._sendMessage("info", message);
+		}
+	}
+}
\ No newline at end of file
diff --git a/tests/_base/loader/hostenv_webworkers/strings.js b/tests/_base/loader/hostenv_webworkers/strings.js
new file mode 100644
index 0000000..53be273
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/strings.js
@@ -0,0 +1,5 @@
+define({
+	root: ({
+		foo: "bar"
+	})
+});
\ No newline at end of file
diff --git a/tests/_base/loader/hostenv_webworkers/worker1.js b/tests/_base/loader/hostenv_webworkers/worker1.js
new file mode 100644
index 0000000..6531e56
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker1.js
@@ -0,0 +1,30 @@
+// summary:
+//		Test whether Dojo will load inside the webworker.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+try{
+	importScripts("../../../../dojo.js", "console.js");
+
+	self.postMessage({
+		type: "testResult",
+		test: "dojo loaded",
+		value: true
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "dojo loaded",
+		value: false
+	});
+}
+
+
+
+
+
diff --git a/tests/_base/loader/hostenv_webworkers/worker2.js b/tests/_base/loader/hostenv_webworkers/worker2.js
new file mode 100644
index 0000000..fef1de8
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker2.js
@@ -0,0 +1,27 @@
+// summary:
+//		Test whether the require function loads modules as it should.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+try{
+	require(["dojo/tests/_base/loader/hostenv_webworkers/strings"], function(strings){
+		self.postMessage({
+			type: "testResult",
+			test: "require is working",
+			value: true
+		});
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "require is working",
+		value: false
+	});
+}
diff --git a/tests/_base/loader/hostenv_webworkers/worker3.js b/tests/_base/loader/hostenv_webworkers/worker3.js
new file mode 100644
index 0000000..1b94375
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker3.js
@@ -0,0 +1,28 @@
+// summary:
+//		Test whether the require function loads modules as it should in async mode.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	async: true,
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+try{
+	require(["dojo/tests/_base/loader/hostenv_webworkers/strings"], function(strings){
+		self.postMessage({
+			type: "testResult",
+			test: "require is working",
+			value: true
+		});
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "require is working",
+		value: false
+	});
+}
diff --git a/tests/_base/loader/hostenv_webworkers/worker4-1.js b/tests/_base/loader/hostenv_webworkers/worker4-1.js
new file mode 100644
index 0000000..4aeb1ca
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker4-1.js
@@ -0,0 +1,28 @@
+// summary:
+//		Test whether subworkers work.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	async: true,
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+try{
+	require(["dojo/tests/_base/loader/hostenv_webworkers/strings"], function(strings){
+		self.postMessage({
+			type: "testResult",
+			test: "subworkers are working",
+			value: true
+		});
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "subworkers are working",
+		value: false
+	});
+}
diff --git a/tests/_base/loader/hostenv_webworkers/worker4.js b/tests/_base/loader/hostenv_webworkers/worker4.js
new file mode 100644
index 0000000..a30813b
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker4.js
@@ -0,0 +1,38 @@
+// summary:
+//		Test subworkers, this is the worker in the middle, that spawns the subworker and passes
+//		messages between them.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	async: true,
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+require(["dojo/has"], function(has){
+	// Test for workers, currently chrome does not support subworkers.
+
+	has.add("webworkers", (typeof Worker === 'function'));
+	if(has("webworkers")){
+		var worker = new Worker("worker4-1.js");
+		worker.addEventListener("message", function(message){
+			self.postMessage(message.data);
+			worker.terminate();
+		}, false);
+	}else{
+		// Chrome does not support webworkers of writing this test
+		// (see: http://code.google.com/p/chromium/issues/detail?id=31666)
+
+		console.warn("Platform does not support subworkers");
+		self.postMessage({
+			type: "testResult",
+			test: "subworkers are working",
+			value: true
+		});
+	}
+});
+
+
diff --git a/tests/_base/loader/hostenv_webworkers/worker5.js b/tests/_base/loader/hostenv_webworkers/worker5.js
new file mode 100644
index 0000000..b40bfa7
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker5.js
@@ -0,0 +1,46 @@
+// summary:
+//		Test loading json via dojo/request in a worker.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	async: true,
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+try{
+	require(["dojo/request"], function(request){
+		request("../../../../tests/_base/loader/hostenv_webworkers/worker5.json", {
+			handleAs: "json"
+		}).then(function(data) {
+				if(data.foo && !data.bar){
+					self.postMessage({
+						type: "testResult",
+						test: data,
+						value: true
+					});
+				}else{
+					self.postMessage({
+						type: "testResult",
+						test: "require is working",
+						value: false
+					});
+				}
+			}, function(){
+				self.postMessage({
+					type: "testResult",
+					test: "request in a worker is working",
+					value: false
+				});
+			});
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "request in a worker is working",
+		value: false
+	});
+}
diff --git a/tests/_base/loader/hostenv_webworkers/worker5.json b/tests/_base/loader/hostenv_webworkers/worker5.json
new file mode 100644
index 0000000..523b218
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker5.json
@@ -0,0 +1,4 @@
+{
+	"foo": true,
+	"bar": false
+}
\ No newline at end of file
diff --git a/tests/_base/loader/hostenv_webworkers/worker6.js b/tests/_base/loader/hostenv_webworkers/worker6.js
new file mode 100644
index 0000000..fd1eeab
--- /dev/null
+++ b/tests/_base/loader/hostenv_webworkers/worker6.js
@@ -0,0 +1,42 @@
+// summary:
+//		Test the use of dojo/on without access to dom in a webworker.
+
+var dojoConfig = {
+	baseUrl: "../../../../../",
+	async: true,
+	packages: [{
+		name: "dojo", location: "dojo"
+	}]
+};
+
+importScripts("../../../../dojo.js", "console.js");
+
+try{
+	require(["dojo/on"], function(on){
+		on(self, "message", function(message){
+			if(message.data.type === "gotMessage"){
+				self.postMessage({
+					type: "testResult",
+					test: "dojo/on in a worker is working",
+					value: true
+				});
+			}else{
+				self.postMessage({
+					type: "testResult",
+					test: "dojo/on in a worker is working",
+					value: false
+				});
+			}
+		});
+
+		self.postMessage({
+			type: "requestMessage"
+		});
+	});
+}catch(e){
+	self.postMessage({
+		type: "testResult",
+		test: "dojo/on in a worker is working",
+		value: false
+	});
+}
diff --git a/tests/_base/loader/require/test-require-plugin.html b/tests/_base/loader/require/test-require-plugin.html
index 766ee49..c4e1442 100644
--- a/tests/_base/loader/require/test-require-plugin.html
+++ b/tests/_base/loader/require/test-require-plugin.html
@@ -17,7 +17,7 @@
 		depends on another legacy module (m2). m1 is wrapped in dojo/require!
 		to guarantee that m2 is onboard before m1 starts evaluating. The
 		loading message above should change to "OK" and you should see the
-		following console ouput:
+		following console output:
 	</p>
 	<pre>
 m2, a plain-old-style synch module, evaluated OK
diff --git a/tests/data/ItemFileWriteStore.js b/tests/data/ItemFileWriteStore.js
index 209f22a..f3004b2 100644
--- a/tests/data/ItemFileWriteStore.js
+++ b/tests/data/ItemFileWriteStore.js
@@ -745,7 +745,7 @@ doh.register("tests.data.ItemFileWriteStore",
 				deferred.errback(error);
 			};
 
-			var intialFetch = function(items, request){
+			var initialFetch = function(items, request){
 				var initialCount = items.length;
 				var canada = store.newItem({name: "Canada", abbr:"ca", capital:"Ottawa"});
 				store.setValue(canada, "someattribute", "modified a new item!");
@@ -762,7 +762,7 @@ doh.register("tests.data.ItemFileWriteStore",
 				};
 				store.fetch({onComplete: afterNewFetch, onError: onError});
 			};
-			store.fetch({onComplete: intialFetch, onError: onError});
+			store.fetch({onComplete: initialFetch, onError: onError});
 			return deferred; //Object
 		},
 		function testWriteAPI_new_modify_delete_revert(){
@@ -781,7 +781,7 @@ doh.register("tests.data.ItemFileWriteStore",
 				deferred.errback(error);
 			};
 
-			var intialFetch = function(items, request){
+			var initialFetch = function(items, request){
 				var initialCount = items.length;
 				var canada = store.newItem({name: "Canada", abbr:"ca", capital:"Ottawa"});
 				store.setValue(canada, "someattribute", "modified a new item!");
@@ -832,7 +832,7 @@ doh.register("tests.data.ItemFileWriteStore",
 				};
 				store.fetch({onComplete: afterNewFetch, onError: onError});
 			};
-			store.fetch({onComplete: intialFetch, onError: onError});
+			store.fetch({onComplete: initialFetch, onError: onError});
 			return deferred; //Object
 		},
 		function testNotificationAPI_onSet(){
diff --git a/tests/date/locale.js b/tests/date/locale.js
index aae4023..c865e4b 100644
--- a/tests/date/locale.js
+++ b/tests/date/locale.js
@@ -68,6 +68,8 @@ define(["doh", "dojo/_base/array", "dojo/i18n", "dojo/_base/kernel", "dojo/date"
 
 	t.is("6", locale.format(date, {datePattern:'E', selector:'date'}));
 
+	t.is("Fri, Aug 11, 2006 AD", locale.format(date, {selector: 'date', datePattern: 'EEE, MMM d, yyyy G', locale:'en-us' }));				
+
 	t.is("12:55 AM", locale.format(date, {formatLength:'short',selector:'time', locale:'en-us'}));
 	t.is("12:55:12", locale.format(date, {timePattern:'h:m:s',selector:'time'}));
 	t.is("12:55:12.35", locale.format(date, {timePattern:'h:m:s.SS',selector:'time'}));
diff --git a/tests/debounce.js b/tests/debounce.js
new file mode 100644
index 0000000..594d90e
--- /dev/null
+++ b/tests/debounce.js
@@ -0,0 +1,50 @@
+define([
+	"doh", "require",
+	"dojo/debounce"
+], function(doh, require, debounce){
+	doh.register("tests.debounce", [
+		function debounceTest(){
+			var debouncedCount = {},
+				debounceTest1 = debounce(function() {
+					debouncedCount['test1'] = debouncedCount['test1'] || 0;
+					debouncedCount['test1']++;
+				}, 100),
+				debounceTest2 = debounce(function() {
+					debouncedCount['test2'] = debouncedCount['test2'] || 0;
+					debouncedCount['test2']++;
+				}, 100);
+
+			debounceTest1();
+			debounceTest1();
+			debounceTest1();
+
+			debounceTest2();
+			setTimeout(function() {
+				debounceTest2();
+			}, 40);
+			setTimeout(function() {
+				debounceTest2();
+			}, 80);
+			setTimeout(function() {
+				debounceTest2();
+			}, 120);
+			setTimeout(function() {
+				debounceTest2();
+			}, 180);
+			setTimeout(function() {
+				debounceTest2();
+			}, 220);
+			setTimeout(function() {
+				debounceTest2();
+			}, 350);
+			
+			var deferred = new doh.Deferred();
+			setTimeout(deferred.getTestCallback(function(){
+				doh.is(1, debouncedCount['test1']);
+				doh.is(2, debouncedCount['test2']);
+			}), 500);
+			return deferred;
+
+		}
+	]);
+});
diff --git a/tests/dom-attr.html b/tests/dom-attr.html
new file mode 100644
index 0000000..cf127b3
--- /dev/null
+++ b/tests/dom-attr.html
@@ -0,0 +1,41 @@
+<!DOCTYPE html>
+<html>
+	<head>
+		<title>testing dom-prop</title>
+		<script src="../dojo.js" data-dojo-config="isDebug:true"></script>
+		<script>
+			require(["dojo", "doh", "dojo/dom-attr", "dojo/dom", "dojo/domReady!"], function(dojo, doh, domAttr, dom){
+				doh.register([
+					{
+						name: "set / get value attribute",
+						runTest: function(t){
+							var test1 = dom.byId("test1"),
+								test2 = dom.byId("test2"),
+								value1 = domAttr.get(test1, "value"),
+								value2 = domAttr.get(test2, "value");
+
+							doh.is('6', value1);
+							doh.is('bar', value2);
+							
+							domAttr.set(test1, "value", "10");
+							domAttr.set(test2, "value", "foo");
+							
+							value1 = domAttr.get(test1, "value");
+							value2 = domAttr.get(test2, "value");
+							
+							doh.is('10', value1);
+							doh.is('foo', value2);
+							
+						}
+					}
+				]);
+
+				doh.run();
+			});
+		</script>
+	</head>
+	<body>
+		<meter id="test1" min="5" max="10" value="6"></meter>
+		<input id="test2" value="bar" />
+	</body>
+</html>
diff --git a/tests/dom-attr.js b/tests/dom-attr.js
new file mode 100644
index 0000000..c1fbd09
--- /dev/null
+++ b/tests/dom-attr.js
@@ -0,0 +1,3 @@
+define(["doh/main", "require"], function(doh, require){
+	doh.register("tests.dom-attr", require.toUrl("./dom-attr.html"), 30000);
+});
diff --git a/tests/dom-construct-place.html b/tests/dom-construct-place.html
new file mode 100644
index 0000000..3496639
--- /dev/null
+++ b/tests/dom-construct-place.html
@@ -0,0 +1,328 @@
+<!DOCTYPE html>
+<html>
+	<head>
+		<title>testing dom-contruct.place</title>
+		<script src="../dojo.js" data-dojo-config="isDebug:true"></script>
+		<script>
+			require(["doh", "dojo/dom-construct", "dojo/dom", "dojo/domReady!"], function(doh, construct, dom){
+
+				var TEST_POSITION = 2;
+				var lastHtml = "<div id='last'><h1>First</h1></div>";
+				var firstHtml = "<div id='first'><h1>First</h1></div>";
+				var beforeHtml = "<div id='before'></div>";
+				var afterHtml = "<div id='after'></div>";
+				var replaceHtml = "<div id='replace'></div>";
+				var onlyHtml = "<div id='only'><h1>first</h1></div>";
+
+				var posHtml = "<div id='pos'><div>first</div><div>second</div><div>last</div></div>";
+
+				var HTMLString = "<div id=\"test\">Test</div>";
+
+				var nodes = {};
+				var child;
+				var fragment;
+
+				function clearTarget() {
+					document.body.innerHTML = "";
+					child = construct.toDom(HTMLString);
+					nodes.last = construct.toDom(lastHtml);
+					nodes.first = construct.toDom(firstHtml);
+					nodes.before = construct.toDom(beforeHtml);
+					nodes.after = construct.toDom(afterHtml);
+					nodes.replace = construct.toDom(replaceHtml);
+					nodes.only = construct.toDom(onlyHtml);
+					nodes.pos = construct.toDom(posHtml);
+					document.body.appendChild(nodes.last);
+					document.body.appendChild(nodes.first);
+					document.body.appendChild(nodes.before);
+					document.body.appendChild(nodes.after);
+					document.body.appendChild(nodes.replace);
+					document.body.appendChild(nodes.only);
+					document.body.appendChild(nodes.pos);
+					fragment = document.createDocumentFragment();
+					fragment.appendChild(document.createElement("div"));
+					fragment.appendChild(document.createElement("div"));
+					fragment.appendChild(document.createElement("div"));
+				}
+
+				function elementsEqual(elementA, elementB) {
+					return elementA.id === elementB.id &&
+						elementA.tagName === elementB.tagName &&
+						elementA.innerHTML === elementB.innerHTML;
+				}
+
+				doh.register([
+					{
+						setUp: clearTarget,
+						name: "last - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.last);
+							doh.assertTrue(elementsEqual(child, nodes.last.lastChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "last - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "last");
+							doh.assertTrue(elementsEqual(child, nodes.last.lastChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "last - place html string with fragment reference",
+						runTest: function(t){
+							construct.place(HTMLString, fragment);
+							doh.assertTrue(elementsEqual(child, fragment.lastChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "last - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.last);
+							doh.assertEqual(child, nodes.last.lastChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "last - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "last");
+							doh.assertEqual(child, nodes.last.lastChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "last - place node with fragment reference",
+						runTest: function(t){
+							construct.place(child, fragment);
+							doh.assertEqual(child, fragment.lastChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.first, "first");
+							doh.assertTrue(elementsEqual(child, nodes.first.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "first", "first");
+							doh.assertTrue(elementsEqual(child, nodes.first.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place html string with fragment reference",
+						runTest: function(t){
+							construct.place(HTMLString, fragment, "first");
+							doh.assertTrue(elementsEqual(child, fragment.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.first, "first");
+							doh.assertEqual(child, nodes.first.firstChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "first", "first");
+							doh.assertEqual(child, nodes.first.firstChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "first - place node with fragment reference",
+						runTest: function(t){
+							construct.place(child, fragment, "first");
+							doh.assertEqual(child, fragment.firstChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "before - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.before, "before");
+							doh.assertTrue(elementsEqual(child, nodes.before.previousSibling));
+						}
+					},{
+						setUp: clearTarget,
+						name: "before - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "before", "before");
+							doh.assertTrue(elementsEqual(child, nodes.before.previousSibling));
+						}
+					},{
+						setUp: clearTarget,
+						name: "before - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.before, "before");
+							doh.assertTrue(child, nodes.before.previousSibling);
+						}
+					},{
+						setUp: clearTarget,
+						name: "before - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "before", "before");
+							doh.assertEqual(child, nodes.before.previousSibling);
+						}
+					},{
+						setUp: clearTarget,
+						name: "after - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.after, "after");
+							doh.assertTrue(elementsEqual(child, nodes.after.nextSibling));
+						}
+					},{
+						setUp: clearTarget,
+						name: "after - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "after", "after");
+							doh.assertTrue(elementsEqual(child, nodes.after.nextSibling));
+						}
+					},{
+						setUp: clearTarget,
+						name: "after - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.after, "after");
+							doh.assertEqual(child, nodes.after.nextSibling);
+						}
+					},{
+						setUp: clearTarget,
+						name: "after - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "after", "after");
+							doh.assertEqual(child, nodes.after.nextSibling);
+						}
+					},{
+						setUp: clearTarget,
+						name: "replace - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.replace, "replace");
+							doh.assertEqual(document.getElementById("replace"), undefined);
+							doh.assertTrue(elementsEqual(child, document.getElementById('test')));
+						}
+					},{
+						setUp: clearTarget,
+						name: "replace - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "replace", "replace");
+							doh.assertEqual(document.getElementById("replace"), undefined);
+							doh.assertTrue(elementsEqual(child, document.getElementById('test')));
+						}
+					},{
+						setUp: clearTarget,
+						name: "replace - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.replace, "replace");
+							doh.assertEqual(document.getElementById("replace"), undefined);
+							doh.assertEqual(child, document.getElementById('test'));
+						}
+					},{
+						setUp: clearTarget,
+						name: "replace - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "replace", "replace");
+							doh.assertEqual(document.getElementById("replace"), undefined);
+							doh.assertEqual(child, document.getElementById('test'));
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.only, "only");
+							doh.assertEqual(nodes.only.children.length, 1);
+							doh.assertTrue(elementsEqual(child, nodes.only.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "only", "only");
+							doh.assertEqual(nodes.only.children.length, 1);
+							doh.assertTrue(elementsEqual(child, nodes.only.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place html string with fragment reference",
+						runTest: function(t){
+							construct.place(HTMLString, fragment, "only");
+							doh.assertEqual(fragment.childNodes.length, 1);
+							doh.assertTrue(elementsEqual(child, fragment.firstChild));
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.only, "only");
+							doh.assertEqual(child, nodes.only.firstChild);
+							doh.assertEqual(1, nodes.only.children.length);
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "only", "only");
+							doh.assertEqual(child, nodes.only.firstChild);
+							doh.assertEqual(1, nodes.only.children.length);
+						}
+					},{
+						setUp: clearTarget,
+						name: "only - place node with fragment reference",
+						runTest: function(t){
+							construct.place(child, fragment, "only");
+							doh.assertEqual(fragment.childNodes.length, 1);
+							doh.assertEqual(child, fragment.firstChild);
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place html string with node reference",
+						runTest: function(t){
+							construct.place(HTMLString, nodes.pos, TEST_POSITION);
+							doh.assertTrue(elementsEqual(child, nodes.pos.children[TEST_POSITION]));
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place html string with id reference",
+						runTest: function(t){
+							construct.place(HTMLString, "pos", TEST_POSITION);
+							doh.assertTrue(elementsEqual(child, nodes.pos.children[TEST_POSITION]));
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place html string with fragment reference",
+						runTest: function(t){
+							construct.place(HTMLString, fragment, TEST_POSITION);
+							doh.assertTrue(elementsEqual(child, fragment.childNodes[TEST_POSITION]));
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place node with node reference",
+						runTest: function(t){
+							construct.place(child, nodes.pos, TEST_POSITION);
+							doh.assertEqual(child, nodes.pos.children[TEST_POSITION]);
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place node with id reference",
+						runTest: function(t){
+							construct.place(child, "pos", TEST_POSITION);
+							doh.assertEqual(child, nodes.pos.children[TEST_POSITION]);
+						}
+					},{
+						setUp: clearTarget,
+						name: "pos - place node with fragment reference",
+						runTest: function(t){
+							construct.place(child, fragment, TEST_POSITION);
+							doh.assertEqual(child, fragment.childNodes[TEST_POSITION]);
+						}
+					}
+
+				]);
+
+				doh.run();
+			});
+		</script>
+	</head>
+	<body>
+		<div id="target"></div>
+	</body>
+</html>
diff --git a/tests/dom-construct.js b/tests/dom-construct.js
new file mode 100644
index 0000000..ff308d0
--- /dev/null
+++ b/tests/dom-construct.js
@@ -0,0 +1,23 @@
+define([
+	"dojo/dom-construct",
+	"doh",
+	"require"
+], function(construct, doh, require){
+
+	if(doh.isBrowser){
+		doh.register("tests.dom-construct-place", require.toUrl("./dom-construct-place.html"), 30000);
+	}
+
+	doh.register("tests.dom-construct", [
+		{
+			name: "Create element with textContent",
+			runTest: function(t){
+				var x = construct.create("div", {
+					textContent: "<b>this is bold</b>"
+				});
+				t.is("&lt;b&gt;this is bold&lt;/b&gt;", x.innerHTML, "textContent was not properly set");
+			}
+		}
+	]);
+
+});
diff --git a/tests/dom-prop.html b/tests/dom-prop.html
new file mode 100644
index 0000000..6ad4385
--- /dev/null
+++ b/tests/dom-prop.html
@@ -0,0 +1,60 @@
+<!DOCTYPE html>
+<html>
+	<head>
+		<title>testing dom-prop</title>
+		<script src="../dojo.js" data-dojo-config="isDebug:true"></script>
+		<script>
+			require(["dojo", "doh", "dojo/dom-prop", "dojo/dom", "dojo/domReady!"], function(dojo, doh, domProp, dom){
+				doh.register([
+					{
+						name: "set / get Attribute",
+						runTest: function(t){
+							var node = dom.byId("node"),
+								content = domProp.get(dom.byId("content1"), "textContent"),
+								content2 = domProp.get(dom.byId("content2"), "textContent"),
+								content3 = domProp.get(dom.byId("content3"), "textContent"),
+								content4 = domProp.get(dom.byId("content4"), "textContent");
+							node.innerHTML = "" //empty the node before testing
+							
+							doh.is(true, content != null); //test is getter works
+							doh.is("Etiam", content.substr(0, 5)); //test if getters return the expected value
+							
+							domProp.set(node, "textContent", content);
+							doh.is(content, node.innerHTML); //test is setter works (no text transformation exepcted because it's just a simple word)
+							
+							domProp.set(node, "textContent", "<b>this is bold</b>");
+							doh.is(-1, node.innerHTML.indexOf("<")); //test if setter escape properly the content
+							
+							domProp.set(node, "textContent", content2);
+
+							var test = node.innerHTML.replace(/\n/g, "");
+							doh.is(-1, test.indexOf("(comment)")); //test if html comments are ignored
+							doh.is(content4, content3);
+						}
+					}
+				]);
+
+				doh.run();
+			});
+		</script>
+	</head>
+	<body>
+	<div id="content1">Etiam</div>
+	<div id="content2">
+		<!-- <p>This should not show (comment).</p>-->
+	</div>
+	<div id="content3">
+	first line
+		second line
+			third line
+	fourth line
+	</div>
+	<div id="content4">
+	first line
+		<span>second line</span>
+		<span>	<span>third line</span></span>
+	fourth line
+	</div>
+	<pre id="node"></pre>
+	</body>
+</html>
diff --git a/tests/dom-prop.js b/tests/dom-prop.js
new file mode 100644
index 0000000..e2df79c
--- /dev/null
+++ b/tests/dom-prop.js
@@ -0,0 +1,3 @@
+define(["doh/main", "require"], function(doh, require){
+	doh.register("tests.dom-prop", require.toUrl("./dom-prop.html"), 30000);
+});
diff --git a/tests/dom-style.html b/tests/dom-style.html
index 86849e4..e36aa4c 100644
--- a/tests/dom-style.html
+++ b/tests/dom-style.html
@@ -30,6 +30,11 @@
 								doh.t(false);
 							}
 						}
+					},
+					function getWidth(){
+						// see http://bugs.dojotoolkit.org/ticket/17962
+						var rowWidth = domStyle.get(dom.byId("trow"), "width");
+						doh.t(rowWidth > 0, "width: " + rowWidth);
 					}
 				]);
 
@@ -39,5 +44,6 @@
 	</head>
 	<body>
 	<div id="node" style="padding: 1px 2px 3px 4px;"></div>
+	<table><tbody><tr id="trow"><td>Col A</td><td>Col B</td></tr></tbody></table>
 	</body>
 </html>
diff --git a/tests/fx.html b/tests/fx.html
index 7b3ae72..524a88f 100644
--- a/tests/fx.html
+++ b/tests/fx.html
@@ -86,6 +86,41 @@
 						},
 						
 						{
+							name: "gotoPercent Chain",
+							timeout: 2000,
+							runTest: function (t) {
+								var d = new doh.Deferred(),
+									node = dom.byId('baz'),
+									anims = [
+										baseFx.fadeOut({node:node}),
+										baseFx.fadeIn({node:node}),
+										fx.wipeOut({node:node}),
+										fx.wipeIn({node:node}),
+										fx.slideTo({node:node,top:200,left:300})
+									],
+									chain = fx.chain(anims),
+									len = anims.length,
+									percent = 0.34,
+									totalActive = len - Math.floor(percent * len),
+									numRun = 0;
+
+								array.forEach(anims, function (anim, index) {
+									aspect.before(anim, 'onEnd', function () {
+										numRun++;
+									});
+								});
+
+								aspect.after(chain, 'onEnd', function () {
+									doh.t(totalActive === numRun);
+									d.callback(true);
+								});
+
+								chain.gotoPercent(percent, true);
+								return d;
+							}
+						},
+
+						{
 							name: "combine",
 							timeout: 1500,
 							runTest: function(t){
@@ -484,6 +519,7 @@
 		</div>
 		
 		<p id="a1">p</p><p id="a2">p</p>
+		<div id="baz">baz</div>
 		
 	</body>
 </html>
diff --git a/tests/i18n.html b/tests/i18n.html
index 8c49310..b0b2505 100644
--- a/tests/i18n.html
+++ b/tests/i18n.html
@@ -47,11 +47,6 @@
 				});
 			}
 
-
-			if(has("dojo-unit-tests")){
-				array.forEach(i18n.unitTests, function(item){item(doh);});
-			}
-
 			doh.run();
 		});
 		if(!require.async){
diff --git a/tests/module.js b/tests/module.js
index 0f81774..ba0750e 100644
--- a/tests/module.js
+++ b/tests/module.js
@@ -9,6 +9,8 @@ define([
 	"dojo/tests/date",
 	"dojo/tests/date/locale",
 	"dojo/tests/date/stamp",
+	"dojo/tests/debounce",
+	"dojo/tests/throttle",
 	"dojo/tests/on",
 	"dojo/tests/mouse",
 	"dojo/tests/json",
@@ -24,7 +26,11 @@ define([
 	"dojo/tests/DeferredList",
 	"dojo/tests/Stateful",
 	"dojo/tests/errors",
+	"dojo/tests/text",
 	"dojo/has!host-node?dojo/tests/node",
+	"dojo/has!host-browser?dojo/tests/dom-attr",
+	"dojo/has!host-browser?dojo/tests/dom-prop",
+	"dojo/has!host-browser?dojo/tests/dom-construct",
 	"dojo/has!host-browser?dojo/tests/router",
 	"dojo/has!host-browser?dojo/tests/request",
 	"dojo/has!host-browser?dojo/tests/behavior",
diff --git a/tests/number.js b/tests/number.js
index 69aa26c..fe75206 100644
--- a/tests/number.js
+++ b/tests/number.js
@@ -407,7 +407,7 @@ doh.register("tests.number",
 
 
 /**
- * In ICU4J, testing logic for NumberFormat.format() is seperated into
+ * In ICU4J, testing logic for NumberFormat.format() is separated into
  * differernt single tese cases. So part of these logic are
  * collected together in this single method.
  *
@@ -724,7 +724,7 @@ function test_number_format_pad(){
 			name: "parse_icu4j3_6",
 			runTest: function(t){
 /**
- * In ICU4J, testing logic for NumberFormat.parse() is seperated into
+ * In ICU4J, testing logic for NumberFormat.parse() is separated into
  * differernt single tese cases. So part of these logic are
  * collected together in this test case. *
  */
diff --git a/tests/on/on.js b/tests/on/on.js
index 46d80d4..29121c2 100644
--- a/tests/on/on.js
+++ b/tests/on/on.js
@@ -1,8 +1,99 @@
 define([
 	"doh", "require",
-	"dojo/_base/declare",  "dojo/Evented", "dojo/has", "dojo/on", "dojo/query", "dojo/topic", "dojo/dom-construct"
-], function(doh, require, declare, Evented, has, on, query, topic, domConstruct){
+	"dojo/_base/declare",  "dojo/Evented", "dojo/has", "dojo/on", "dojo/query", "dojo/topic", "dojo/dom-construct", "dojo/on/debounce", "dojo/on/throttle"
+], function(doh, require, declare, Evented, has, on, query, topic, domConstruct, dojoDebounce, dojoThrottle){
+	doh.register("tests.on.delegate", [
+		function matches(){
+			var eDiv = document.body.appendChild(document.createElement("div")),
+				eDiv2 = eDiv.appendChild(document.createElement("div")),
+				eSpan = eDiv2.appendChild(document.createElement("span")),
+				matchResult = [];
+				handle = on(eDiv, "click", function(e){
+					matchResult.push(!!on.matches(e.target, 'span:click', this));
+					matchResult.push(!!on.matches(e.target, 'div:click', this));
+					matchResult.push(!!on.matches(e.target, 'div:click', this, false));
+					matchResult.push(!!on.matches(e.target, 'body:click', this));
+				});
+
+			eSpan.click();
+			handle.remove();
+			handle = on(eDiv, "click", function(e){
+				matchResult.push(!!on.matches(e.target, 'span:click', this));
+				matchResult.push(!!on.matches(e.target, 'div:click', this));
+			});
+			eDiv2.click();
+			doh.is([true, true, false, false, false, true], matchResult);
+		},
+		function debounce(){
+			var eDiv = document.body.appendChild(document.createElement("div")),
+				eDiv2 = eDiv.appendChild(document.createElement("div")),
+				eA = eDiv2.appendChild(document.createElement("a")),
+				eButton = eA.appendChild(document.createElement("button")),
+				debouncedCount = 0,
+				debouncedCount2 = 0,
+				debouncedCount3 = 0,
+				eventTargetAvailable = false;
+				clickCount = 0;
 
+			on(eDiv, dojoDebounce("a:click", 100), function(e){
+				debouncedCount++;
+				eventTargetAvailable = e && e.target && e.target.nodeType === 1;
+			});
+			on(eDiv2, dojoDebounce("click", 100), function(){
+				debouncedCount2++;
+			});
+			on(eDiv, dojoDebounce("click,a:click", 100), function(){
+				debouncedCount3++;
+			});
+			on(eDiv, "a:click", function(){
+				clickCount++;
+			});
+			eButton.click();
+			eButton.click();
+			eButton.click();
+			eButton.click();
+			
+			var deferred = new doh.Deferred();
+			setTimeout(deferred.getTestCallback(function(){
+				doh.is(true, eventTargetAvailable);
+				doh.is(1, debouncedCount);
+				doh.is(1, debouncedCount2);
+				doh.is(1, debouncedCount3);
+				doh.is(4, clickCount);
+			}), 110);
+			return deferred;
+
+		},
+		function throttle(){
+			var eDiv = document.body.appendChild(document.createElement("div")),
+				eDiv2 = eDiv.appendChild(document.createElement("div")),
+				eA = eDiv2.appendChild(document.createElement("a")),
+				eButton = eA.appendChild(document.createElement("button")),
+				throttleCount = 0,
+				clickCount = 0;
+
+			on(eDiv, dojoThrottle("a:click", 100), function(){
+				throttleCount++
+			});
+			on(eDiv, "a:click", function(){
+				clickCount++
+			});
+			var interv = setInterval(function() {
+				eButton.click();
+				if(clickCount === 4) {
+					clearInterval(interv);
+				}
+			}, 45);
+			
+			var deferred = new doh.Deferred();
+			setTimeout(deferred.getTestCallback(function(){
+				doh.is(4, clickCount);
+				doh.is(2, throttleCount);
+			}), 300);
+			return deferred;
+
+		}
+	]);
 	doh.register("tests.on", [
 		function object(t){
 			var order = [];
@@ -44,6 +135,23 @@ define([
 			});
 			t.is(order, [0,0,3,0,3,3,3,3,6,0,3,7,4]);
 		},
+		function multipleHandlers(t){
+			var div = document.body.appendChild(document.createElement("div"));
+			var order = [];
+			var customEvent = function(target, listener){
+				return on(target, "custom", listener);
+			};
+			on(div, "a,b", function(event){
+				order.push(1 + event.type);
+			});
+			on(div, ["a",customEvent], function(event){
+				order.push(2 + event.type);
+			});
+			on.emit(div, "a", {});
+			on.emit(div, "b", {});
+			on.emit(div, "custom", {});
+			t.is(order, ["1a", "2a", "1b", "2custom"]);
+		},
 		function once(t){
 			var order = [];
 			var obj = new Evented();
@@ -184,6 +292,7 @@ define([
 				});
 				on(document, "button:click", function(){
 				}); // just make sure this doesn't throw an error
+				
 			}else{//just pass then
 				order.push(8, 9);
 			}
@@ -308,6 +417,15 @@ define([
 			});
 			button.click();
 			t.is(testValue, 3);
+		},
+		function delegatePreventDefault(t){
+			var div = document.createElement("div");
+			div.innerHTML = '<input type="checkbox">';
+			var cb = div.childNodes[0];
+			document.body.appendChild(div);
+			on(div, '.matchesNothing:click', function () {});
+			cb.click();
+			t.t(cb.checked);
 		}
 	]);
 
diff --git a/tests/query/query.html b/tests/query/query.html
index 592f1ad..f65a9b2 100644
--- a/tests/query/query.html
+++ b/tests/query/query.html
@@ -12,8 +12,8 @@
 			var selector = specified ? specified[0].split("=")[1] : "acme";
 
 			require(["doh", "dojo/_base/array", "dojo/dom", "dojo/request/iframe",
-				"dojo/query!"+selector, "dojo/NodeList", "dojo/sniff", "dojo/domReady!"],
-					function(doh, array, dom, iframe, dq, NodeList, has){
+				"dojo/query!"+selector, "dojo/NodeList", "dojo/sniff", "dojo/dom-construct", "dojo/domReady!"],
+					function(doh, array, dom, iframe, dq, NodeList, has, domConstruct){
 				query = dq; // make a global
 
 				function createDocument(xml){
@@ -236,6 +236,21 @@
 						var i = query("div");
 						// smoke test
 						i.sort(function(a,b){ return 1; })
+					},
+					function document_fragment() {
+						var detachedDom = domConstruct.toDom("<i><u><a></a><b id='b'></b></u></i>");
+						var documentFragment = domConstruct.toDom("<i></i>    <u><a></a><b id='b'></b></u>");
+
+						doh.is(1, query("#b", detachedDom).length);
+						doh.is(1, query("#b", detachedDom.firstChild).length);
+						doh.is(1, query("#b", documentFragment).length);
+						doh.is(1, query("#b", documentFragment.childNodes[2]).length);
+
+						var detachedDom2 = domConstruct.toDom("<i><u><a></a><b></b></u></i>");
+						var documentFragment2 = domConstruct.toDom("<i></i>    <u><a></a><b></b></u>");
+
+						doh.is(0, query("#b", detachedDom2).length);
+						doh.is(0, query("#b", documentFragment2).length);
 					}
 				]);
 
diff --git a/tests/query/queryQuirks.html b/tests/query/queryQuirks.html
index 8612e35..749249d 100644
--- a/tests/query/queryQuirks.html
+++ b/tests/query/queryQuirks.html
@@ -10,8 +10,8 @@
 			var specified = window.location.search.substr(1).match(/selector=(.*)/);
 			var selector = specified ? specified[0].split("=")[1] : "acme";
 
-			require(["dojo", "doh", "dojo/query!"+selector, "dojo/sniff", "dojo/io/iframe", "dojo/domReady!"],
-					function(dojo, doh, dq, has){
+			require(["dojo", "doh", "dojo/query!"+selector, "dojo/sniff", "dojo/dom-construct", "dojo/io/iframe", "dojo/domReady!"],
+					function(dojo, doh, dq, has, domConstruct){
 				query = dq; // make a global
 
 				function createDocument(xml){
@@ -219,6 +219,27 @@
 						var i = query("div");
 						// smoke test
 						i.sort(function(a,b){ return 1; })
+					},
+					function document_fragment() {
+						var detachedDom = domConstruct.toDom("<i><u><a></a><b id='b'></b></u></i>");
+						var documentFragment = domConstruct.toDom("<i></i>    <u><a></a><b id='b'></b></u>");
+
+						doh.is(1, query("#b", detachedDom).length);
+						doh.is(1, query("#b", detachedDom.firstChild).length);
+						doh.is(1, query("#b", documentFragment).length);
+
+						// In IE8 in quirks mode there is no text node on the document fragment
+						if(has('ie') === 8) {
+							doh.is(1, query("#b", documentFragment.childNodes[1]).length);
+						} else {
+							doh.is(1, query("#b", documentFragment.childNodes[2]).length);
+						}
+
+						var detachedDom2 = domConstruct.toDom("<i><u><a></a><b></b></u></i>");
+						var documentFragment2 = domConstruct.toDom("<i></i>    <u><a></a><b></b></u>");
+
+						doh.is(0, query("#b", detachedDom2).length);
+						doh.is(0, query("#b", documentFragment2).length);
 					}
 				]);
 
diff --git a/tests/regexp.js b/tests/regexp.js
index e0428b7..cd088cc 100644
--- a/tests/regexp.js
+++ b/tests/regexp.js
@@ -4,6 +4,7 @@ doh.register("tests.regexp",
 		function test_regexp_escape(t){
 			t.assertTrue(new RegExp(regexp.escapeString("\f\b\n\t\r+.$?*|{}()[]\\/^")).test("TEST\f\b\n\t\r+.$?*|{}()[]\\/^TEST"));
 			t.assertTrue(new RegExp(regexp.escapeString("\f\b\n\t\r+.$?*|{}()[]\\/^", ".")).test("TEST\f\b\n\t\r+X$?*|{}()[]\\/^TEST"));
+			t.is("a\\-z", regexp.escapeString("a-z"));
 		}
 );
 
diff --git a/tests/request/blob.gif b/tests/request/blob.gif
new file mode 100644
index 0000000..4bcc753
Binary files /dev/null and b/tests/request/blob.gif differ
diff --git a/tests/request/document.html b/tests/request/document.html
new file mode 100644
index 0000000..626b162
--- /dev/null
+++ b/tests/request/document.html
@@ -0,0 +1,9 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+	<meta charset="utf-8">
+	<title>document responseType</title>
+</head>
+<body>
+</body>
+</html>
diff --git a/tests/request/xhr.html b/tests/request/xhr.html
index 5b486bf..5219949 100644
--- a/tests/request/xhr.html
+++ b/tests/request/xhr.html
@@ -294,8 +294,7 @@
 							var d = new doh.Deferred();
 							xhr.post("xhrDummyMethod.php", {
 								data: t.formData,
-								handleAs: "json",
-								headers: { "Content-Type": false }
+								handleAs: "json"
 							}).then(d.getTestCallback(function(data){
 								t.is({ foo: "bar", baz: "blah" }, data.post);
 							}), function(error){
@@ -309,6 +308,98 @@
 					});
 				}
 
+				if(has('native-response-type')) {
+					tests.push({
+						name: 'response Blob',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.get("blob.gif", {
+								handleAs: "blob"
+							}).then(d.getTestCallback(function(response){
+								t.is(Blob, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+
+					tests.push({
+						name: 'response Blob (post)',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.post("blob.gif", {
+								handleAs: "blob"
+							}).then(d.getTestCallback(function(response){
+								t.is(Blob, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+
+					tests.push({
+						name: 'response ArrayBuffer',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.get("blob.gif", {
+								handleAs: "arraybuffer"
+							}).then(d.getTestCallback(function(response){
+								t.is(ArrayBuffer, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+
+					tests.push({
+						name: 'response ArrayBuffer (post)',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.post("blob.gif", {
+								handleAs: "arraybuffer"
+							}).then(d.getTestCallback(function(response){
+								t.is(ArrayBuffer, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+
+					tests.push({
+						name: 'response document',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.get("document.html", {
+								handleAs: "document"
+							}).then(d.getTestCallback(function(response){
+								t.is(document.constructor, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+
+					tests.push({
+						name: 'response document (post)',
+						runTest: function(t){
+							var d = new doh.Deferred();
+							xhr.post("document.html", {
+								handleAs: "document"
+							}).then(d.getTestCallback(function(response){
+								t.is(document.constructor, response.constructor);
+							}), function(error){
+								d.errback(error);
+							});
+							return d;
+						}
+					});
+				}
+
 				doh.register("dojo/request/xhr", tests);
 				doh.run();
 			});
diff --git a/tests/resources/testClass.smd b/tests/resources/testClass.smd
old mode 100755
new mode 100644
diff --git a/tests/resources/yahoo_smd_v1.smd b/tests/resources/yahoo_smd_v1.smd
old mode 100755
new mode 100644
diff --git a/tests/rpc.js b/tests/rpc.js
index 10610cc..5a678ff 100644
--- a/tests/rpc.js
+++ b/tests/rpc.js
@@ -101,40 +101,6 @@ define(["doh/main", "require", "../rpc/RpcService", "../rpc/JsonService", "../rp
 					return new Error("Error loading and/or parsing an smd file");
 				}
 			}
-		},
-
-		{
-			name: "JsonP_test",
-			timeout: 10000,
-			setUp: function(){
-				this.svc = new JsonpService(require.toUrl("dojo/tests/resources/yahoo_smd_v1.smd"), {appid: "foo"});
-			},
-			runTest: function(){
-				var d = new doh.Deferred();
-
-				if (window.location.protocol=="file:"){
-					var err= new Error("This Test requires a webserver and will fail intentionally if loaded from file://");
-					d.errback(err);
-					return d;
-				}
-
-				var td = this.svc.webSearch({query:"dojotoolkit"});
-
-				td.addCallbacks(function(result){
-					return true;
-					if (result["ResultSet"]["Result"][0]["DisplayUrl"]=="dojotoolkit.org/"){
-						return true;
-					}else{
-						return new Error("JsonRpc_SMD_Loading_Test failed, resultant content didn't match");
-					}
-				}, function(result){
-					return new Error(result);
-				});
-
-				td.addBoth(d, "callback");
-
-				return d;
-			}
 		}
 	]);
 
diff --git a/tests/store/DataStore.js b/tests/store/DataStore.js
index 789f787..d69d802 100644
--- a/tests/store/DataStore.js
+++ b/tests/store/DataStore.js
@@ -25,6 +25,9 @@ define(["doh", "dojo/store/DataStore", "dojo/data/ItemFileReadStore", "dojo/data
 				t.t(store.get(5).prime);
 				t.is(store.get(5).children[1].name, "two");
 			},
+			function testGetNonExistent(t){
+				t.is(store.get(10), undefined);
+			},
 			function testQuery1(t){
 				var d = new doh.Deferred();
 				store.query({prime: true}).then(d.getTestCallback(function(results){
@@ -60,6 +63,45 @@ define(["doh", "dojo/store/DataStore", "dojo/data/ItemFileReadStore", "dojo/data
 				});
 				t.t(store.get(6).perfect);
 			},
+			function testAdd(t){
+				store.add({
+					id: 7,
+					name: "seven"
+				});
+				t.is(store.get(7).name, "seven");
+			},
+			function testAddExisting(t){
+				return store.add({
+					id: 7,
+					name: "seven"
+				}).then(function(){
+					t.error("Add existing did not fail");
+				}, function(){
+					console.log("Add existing failed, as expected");
+				});
+			},
+			function testOverwriteNew(t){
+				return store.put({
+					id: 8,
+					name: "eight"
+				}, {
+					overwrite: true
+				}).then(function(){
+					t.error("Updating new did not fail");
+				}, function(){
+					console.log("Updating new failed, as expected");
+				});
+			},
+			function testRemove(t){
+				return store.remove(7).then(function(result){
+					t.t(result);
+				}).then(function(result){
+					// second time should return false
+					return store.remove(7);
+				}).then(function(result){
+					t.f(result);
+				});
+			},
 			function testNoWriteFeature(t){
 				var readOnlyStore = new DataStore({store:new ItemFileReadStore({})});
 				t.f(readOnlyStore.put);
diff --git a/tests/store/JsonRest.js b/tests/store/JsonRest.js
index 81e9826..ed2c18c 100644
--- a/tests/store/JsonRest.js
+++ b/tests/store/JsonRest.js
@@ -34,6 +34,14 @@ define(["doh/main", "require", "dojo/_base/lang", "dojo/store/JsonRest"], functi
 				});
 				return d;
 			},
+			function _getTarget(t){
+				// make sure it works without the trailing slash
+				store.target = store.target.slice(0, -1);
+				t.is(store.target + "/foo", store._getTarget("foo"));
+				// and with the slash
+				store.target = store.target + '/';
+				t.is(store.target + "foo", store._getTarget("foo"));
+			},
 			function testQueryIterative(t){
 				var d = new doh.Deferred();
 				var i = 0;
diff --git a/tests/string.js b/tests/string.js
index 92217b1..0d902e7 100644
--- a/tests/string.js
+++ b/tests/string.js
@@ -85,8 +85,14 @@ doh.register("tests.string",
 			t.is("abababab", string.rep("ab", 4));
 			t.is("", string.rep("ab", 0));
 			t.is("", string.rep("", 3));
+		},
+
+		function test_string_escape(t){
+			t.is("astoria", string.escape("astoria"));
+			t.is("&amp;&lt;&gt;&#x27;&#x2F;", string.escape("&<>'/"));
+			t.is('oh&quot;oh&quot;oh', string.escape('oh"oh"oh'));
 		}
 	]
 );
 
-});
\ No newline at end of file
+});
diff --git a/tests/test_touch.html b/tests/test_touch.html
index 92b383d..d25daa1 100644
--- a/tests/test_touch.html
+++ b/tests/test_touch.html
@@ -10,6 +10,8 @@
 				height: 150px;
 				border: 1px solid #7FB0DB;
 				background-color: #7FB0DB;
+				touch-action: none;
+				-ms-touch-action: none;
 			}
 			#innertest {
 				border: 1px solid white;
@@ -23,21 +25,27 @@
 				height: 50px;
 				border: 1px solid yellow;
 				background-color: yellow;
+				touch-action: none;
+				-ms-touch-action: none;
 			}
 			#test3 {
 				width: 300px;
 				height: 150px;
 				border: 1px solid red;
 				background-color: red;      
+				touch-action: none;
+				-ms-touch-action: none;
 			}
 			#innertest3 {
 				border: 1px solid white;
 				width: 250px;
 				height: 75px;
 				background-color: white;
+				touch-action: none;
+				-ms-touch-action: none;
 			}
 			#current, #log {
-				width: 300px;
+				width: 50%;
 				height: 200px;
 				float: left;
 			}
@@ -114,9 +122,24 @@
 					// stopPropagation() should work too
 					e.stopPropagation();
 				});
+				
+				
+				function logClickEvent(e) {
+					// synthetic click has _dojo_click = true
+					dom.byId("log").innerHTML = " - _dojo_click [" + e._dojo_click + "]<br/>" + dom.byId("log").innerHTML;
+					// display mouse event attributes
+					// http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mouseevents
+					var info = "",
+							mouseEventAttrNames = ["screenX", "screenY", "clientX", "clientY", "ctrlKey", "altKey", "shiftKey", "metaKey", "button"];
+					for (var attrIdx = 0, name; attrIdx < mouseEventAttrNames.length && (name = mouseEventAttrNames[attrIdx]); attrIdx++) {
+						info += " - " + name + " [" + e[name] + "]<br/>";
+					}
+					dom.byId("log").innerHTML = info + dom.byId("log").innerHTML;
+				}
 
 				dom.byId("test3").dojoClick = true;
 				on(dom.byId("test3"), "click", function(e){
+					logClickEvent(e);
 					if(has("touch")){
 						// click should be a synthetic click
 						dom.byId("log").innerHTML = (e._dojo_click ? "Synthetic click received in test3" : "ERROR: native click received in test3") + "<br/>" + dom.byId("log").innerHTML;
@@ -127,6 +150,7 @@
 				});
 				dom.byId("innertest3").dojoClick = false;
 				on(dom.byId("innertest3"), "click", function(e){
+					logClickEvent(e);
 					// click should be a native click
 					dom.byId("log").innerHTML = (e._dojo_click ? "ERROR: Synthetic click received in innertest3" : "Native click received in innertest3") + "<br/>" + dom.byId("log").innerHTML;;
 					e.stopPropagation();
@@ -301,19 +325,17 @@
 					}
 
 					// Setup tests relevant for this platform
-					if(navigator.pointerEnabled){
-						register('Pointer events', 'pointerdown', 'pointermove', 'pointerup',
-								has('touch') ? 'pointercancel' : 'mouseout');
-					}else if(navigator.msPointerEnabled){
-						register('MSPointer events', 'MSPointerDown', 'MSPointerMove', 'MSPointerUp',
-								has('touch') ? 'MSPointerCancel' : 'mouseout');
+					if(has("pointer-events")){
+						register('Pointer events', 'pointerdown', 'pointermove', 'pointerup', 'pointercancel');
+					}else if(has("MSPointer")){
+						register('MSPointer events', 'MSPointerDown', 'MSPointerMove', 'MSPointerUp', 'MSPointerCancel');
 					}else{
 						// Mouse is always supported, even on devices with touch capability.
 						// Test mouse first because once we start emitting touch events, dojo/touch ignores mouse events
 						// for 1000ms.
 						register('mouse events', 'mousedown', 'mousemove', 'mouseup', 'mouseout');
 
-						if(has("touch")){
+						if(has("touch-events")){
 							register('touch events', 'touchstart', 'touchmove', 'touchend', 'touchcancel');
 
 							var domEltWithDisabledSyntheticClick = dom.byId("innertest3");
diff --git a/tests/text.html b/tests/text.html
new file mode 100644
index 0000000..53c16e4
--- /dev/null
+++ b/tests/text.html
@@ -0,0 +1,20 @@
+<!DOCTYPE html>
+<html>
+	<head>
+		<title>dojo/text</title>
+		<meta charset="utf-8">
+	</head>
+	<body>
+		<script src="../dojo.js" data-dojo-config="async: 1"></script>
+		<script>
+require([ "doh", "dojo/text!dojo/tests/text.php", "dojo/json" ], function(doh, data, JSON){
+	doh.register(function checkRequestHeader(t){
+		data = JSON.parse(data);
+		t.f(data['x-requested-with']);
+	});
+
+	doh.run();
+});
+		</script>
+	</body>
+</html>
diff --git a/tests/text.js b/tests/text.js
new file mode 100644
index 0000000..9c85681
--- /dev/null
+++ b/tests/text.js
@@ -0,0 +1,5 @@
+define([ "doh", "dojo/has", "require" ], function (doh, has, require) {
+	if(has("host-browser")){
+		doh.registerUrl("tests.text", require.toUrl("./text.html"), 30000);
+	}
+});
diff --git a/tests/text.php b/tests/text.php
new file mode 100644
index 0000000..df8e085
--- /dev/null
+++ b/tests/text.php
@@ -0,0 +1,11 @@
+<?php
+
+$headers = array();
+foreach($_SERVER as $key => $value) {
+	if (strpos($key, 'HTTP_') === 0) {
+		$headers[strtolower(str_replace('_', '-', substr($key, 5)))] = $value;
+	}
+}
+
+header('Content-Type: application/json');
+echo json_encode($headers);
diff --git a/tests/throttle.js b/tests/throttle.js
new file mode 100644
index 0000000..4195ad3
--- /dev/null
+++ b/tests/throttle.js
@@ -0,0 +1,50 @@
+define([
+	"doh", "require",
+	"dojo/throttle"
+], function(doh, require, throttle){
+	doh.register("tests.throttle", [
+		function throttleTest(){
+			var throttledCount = {},
+				throttleTest1 = throttle(function() {
+					throttledCount['test1'] = throttledCount['test1'] || 0;
+					throttledCount['test1']++;
+				}, 100),
+				throttleTest2 = throttle(function() {
+					throttledCount['test2'] = throttledCount['test2'] || 0;
+					throttledCount['test2']++;
+				}, 100);
+
+			throttleTest1();
+			throttleTest1();
+			throttleTest1();
+
+			throttleTest2();
+			setTimeout(function() {
+				throttleTest2();
+			}, 40);
+			setTimeout(function() {
+				throttleTest2();
+			}, 80);
+			setTimeout(function() {
+				throttleTest2();
+			}, 120);
+			setTimeout(function() {
+				throttleTest2();
+			}, 180);
+			setTimeout(function() {
+				throttleTest2();
+			}, 220);
+			setTimeout(function() {
+				throttleTest2();
+			}, 350);
+			
+			var deferred = new doh.Deferred();
+			setTimeout(deferred.getTestCallback(function(){
+				doh.is(1, throttledCount['test1']);
+				doh.is(3, throttledCount['test2']);
+			}), 500);
+			return deferred;
+
+		}
+	]);
+});
diff --git a/tests/window.js b/tests/window.js
old mode 100755
new mode 100644
diff --git a/tests/window/test_scroll.html b/tests/window/test_scroll.html
index 4abd814..0ffcf6b 100644
--- a/tests/window/test_scroll.html
+++ b/tests/window/test_scroll.html
@@ -239,7 +239,7 @@
 					doh.f(domAttr.has(body,'_parent'));
 				}
 			]);
-                        array.forEach([	'8249',
+			array.forEach([	'8249',
 					'8284',
 					'absContent',
 					'fixedNode',
@@ -253,7 +253,12 @@
 					'tooBig',
 					'htmlPadding' ],
 				function(test){
-                        		array.forEach([	"_strict", "_quirks", "_loose_rtl", "_quirks_rtl" ],
+					// IE9+ don't support quirks (or loose?) mode <iframe>'s inside a strict document (or vice-versa).
+					// The <iframe> loads but it's actually running in strict mode.
+					// Therefore, it's pointless to run those tests
+					var modes = (has("ie") >= 9 || has("trident")) ? ["_strict"] :
+							["_strict", "_quirks", "_loose_rtl", "_quirks_rtl" ];
+					array.forEach(modes,
 						function(mode){
 							var	id = test+mode,
 								n, maxWidth, maxHeight, nodeWidth, nodeHeight, rAfterScroll, vAfterScroll, rBeforeScroll, vBeforeScroll;
